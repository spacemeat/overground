{
  materials: {
    defaultMaterial: {

      # This should be replaced by the data in a mesh that uses this material. That means a different material for each mesh that has a different format. This is handled internally, but it informs the following truism: One material may generate many pipeline objects. One mesh will only ever generate one vb/ib set.
#      vertexDecl: [ {
#          offset: 0                   # position
#          format: R32G32B32_SFLOAT
#        } {
#          offset: 0                   # normal
#          format: R32G32B32_SFLOAT
#        } {
#          offset: 0                   # tx
#          format: R32G32_SFLOAT
#        }
#      ]
      stages: {
        vertex: {
          shaderAsset: "diffuse-vshader"
          entry: main
          # TODO: modifiers? Precompile params? Maybe not
        }
        fragment: {
          shaderAsset: "diffuse-fshader"
          entry: main
          # TODO: modifiers? Precompile params? Maybe not
          # TODO: texture / sampler info here?
        }
      }
      rasterizationState: {
        depthClampEnable: false
        rasterizerDiscardEnable: false
        polygonMode: fill
        cullMode: none
        frontFace: ccw
        depthBiasEnable: false
        lineWidth: 1.0
      }
      multisampleState: {
        rasterizationSamples: 1
        sampleShadingEnable: false
        sampleMask: null
        alphaToCoverageEnable: false
        alphaToOneEnable: false
      }
      blendState: {
        logicOpEnable: false
        attachments: [ { 
            srcColorFactor: srcAlpha
            dstColorFactor: 1-srcAlpha
            colorOp: +
            srcAlphaFactor: 1
            dstAlphaFactor: 0
            alphaOp: +
            colorWriteMask: [r g b a]
          }
        ]
      }
      tesselationState: null
      depthStencilState: {
        depthTestEnable: true
        depthWriteEnable: true
        depthCompareOp: <
        depthBoundsTestEnable: false
        stencilTestEnable: false
        frontStencilOp: {
          failOp: zero
          passOp: zero
          depthFailOp: zero
          compareOp: never
          compareMask: 0
          writeMask: 0
          reference: 0
        }
        backStencilOp: {
          failOp: zero
          passOp: zero
          depthFailOp: zero
          compareOp: never
          compareMask: 0
          writeMask: 0
          reference: 0
        }
        minDepthBounds: 0
        maxDepthBounds: 1
      }
      dynamicStates: viewport scissor
    }
  }
}
